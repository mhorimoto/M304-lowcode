#! /usr/bin/env php
<?php
//
//  dump304
//    Version 3.00
//       M304 Version 3.x.x 対応
//            Version 2.x.x に対しては、-2 オプションをつける。
//
global $n;
$n = 0;
if (!empty($argv[1])) {
    $opts = getopt("d:u2",[],$ri);
    $host = @$argv[$ri];
    $optd = $opts['d'];
    $ausm = @$opts['u'];
    $uasm = isset($ausm);
    if (isset($opts['2'])) {
        $verc = 2;
    } else {
        $verc = 3;
    }  // Version 2.x.x なら2がセットされる

    switch ($optd) {
    case 'rx':
    case 'sched':
        $addr = 0x1000;
        $lcnt = 8;
        break;
    case 'tx':
        $addr = 0x3000;
        $lcnt = 3;
        break;
    case 'ope':
        $addr = 0x5000;
        $lcnt = 2;
        break;
    case 'info':
        $addr = 0x0000;
        $lcnt = 1;
        break;
    }
    $ver = getVersion($host);
    $f = "";
    for ($lc=0;$lc<$lcnt;$lc++) {
        $a = $addr+($lc*0x100);
        $url = sprintf("http://%s/L00%X00",$host,$a);
        $f = fopen($url,"r");
        if ($f) {
            if ($uasm==1) {
                switch($optd) {
                case 'info':
                    display_info($f,$verc);
                    break;
                case 'rx':
                    display_rx($f,$verc);
                    break;
                case 'tx':
                    display_tx($f,$verc);
                    break;
                case 'ope':
                    display_ope($f,$verc);
                    break;
                }
            } else {
                normal_dump($f);
            }
        }
        fclose($f);
    }
} else {
    echo "You need argument.";
}


////////////////////////////////////////////////////////////////////

function display_info($fp,$ver) {
    for($y=0;$y<8;$y++) {
        $buffer = fgets($fp,80);
        for($x=0;$x<16;$x++) {
            $z = 0xff & hexdec(substr($buffer,(3*$x+8),3));
            $hexdata[$y*0x10+$x] = $z;
        }
    }
    printf("     UECS-ID: %s\n",prt_LC_INFO($hexdata,"uecsid"));
    printf("     VERSION: %s\n",$ver);
    printf(" MAC ADDRESS: %s\n",prt_LC_INFO($hexdata,"mac"));
    printf("   IP ASSIGN: %s\n",prt_LC_INFO($hexdata,"dhcpf"));
    printf("    FIXED IP: %s\n",prt_LC_INFO($hexdata,"ipaddress"));
    printf("     NETMASK: %s\n",prt_LC_INFO($hexdata,"netmask"));
    printf("     GATEWAY: %s\n",prt_LC_INFO($hexdata,"defgw"));
    printf("         DNS: %s\n",prt_LC_INFO($hexdata,"dns"));
    printf("      VENDER: %s\n",prt_LC_INFO($hexdata,"vender"));
    printf("   NODE NAME: %s\n",prt_LC_INFO($hexdata,"nodename"));
    printf("   DEBUG MSG: %s\n",prt_LC_INFO($hexdata,"dbgmsg"));
}

function display_rx($fp,$verc) {
    global $n;
    printf("%d\n",$verc);
    for($y=0;$y<4;$y++) {
        for($w=0;$w<4;$w++) {  // 4records per an entry
            $buffer = fgets($fp,80);
            for($x=0;$x<16;$x++) {
                $z = 0xff & hexdec(substr($buffer,(3*$x+8),3));
                $hexdata[$w*0x10+$x] = $z;
                //                printf("%02X ",$z);
            }
            //            printf("\n");
        }
        switch($verc) {
            case 2:
                printf("%02d:%s,%3d,%3d,%3d,%2d,%s,%d,%c,%s,%s,%d,%d,%d,%d,%d,%d,%s,%s,%s,%s,%s,%s,%s,%s%s\n",
                    $n,
                    prt_LC_RTX($hexdata,"valid",$verc),prt_LC_RTX($hexdata,"room",$verc),
                    prt_LC_RTX($hexdata,"region",$verc),prt_LC_RTX($hexdata,"order",$verc),
                    prt_LC_RTX($hexdata,"priority",$verc),prt_LC_RTX($hexdata,"lv",$verc),
                    prt_LC_RTX($hexdata,"cast",$verc),prt_LC_RTX($hexdata,"sr",$verc),
                    prt_LC_RTX($hexdata,"ccmtype",$verc),prt_LC_RTX($hexdata,"unit",$verc),
                    prt_LC_RTX($hexdata,"sthr",$verc),prt_LC_RTX($hexdata,"stmn",$verc),
                    prt_LC_RTX($hexdata,"edhr",$verc),prt_LC_RTX($hexdata,"edmn",$verc),
                    prt_LC_RTX($hexdata,"inmn",$verc),prt_LC_RTX($hexdata,"dumn",$verc),
                    prt_LC_RTX($hexdata,"rly1",$verc),prt_LC_RTX($hexdata,"rly2",$verc),
                    prt_LC_RTX($hexdata,"rly3",$verc),prt_LC_RTX($hexdata,"rly4",$verc),
                    prt_LC_RTX($hexdata,"rly5",$verc),prt_LC_RTX($hexdata,"rly6",$verc),
                    prt_LC_RTX($hexdata,"rly7",$verc),prt_LC_RTX($hexdata,"rly8",$verc),
                    prt_LC_RTX($hexdata,"cond",$verc));
                break;
            case 3:
                printf("%02d:%s,%02d:%02d,%02d:%02d,%s,%02d,%02d,%s,%s,%s,%s,%s,%s,%s,%s,".
                    "%d,%s,%f, %s,%d,%s, %f, %s,%d,%s, %f, %s,%d,%s, %f, %s,%d,%s, %f\n",
                    $n,
                    prt_LC_RTX($hexdata,"valid",$verc),
                    prt_LC_RTX($hexdata,"sthr",$verc),prt_LC_RTX($hexdata,"stmn",$verc),
                    prt_LC_RTX($hexdata,"edhr",$verc),prt_LC_RTX($hexdata,"edmn",$verc),
                    prt_LC_RTX($hexdata,"mnflag",$verc),
                    prt_LC_RTX($hexdata,"inmn",$verc),prt_LC_RTX($hexdata,"dumn",$verc),
                    prt_LC_RTX($hexdata,"rly1",$verc),prt_LC_RTX($hexdata,"rly2",$verc),
                    prt_LC_RTX($hexdata,"rly3",$verc),prt_LC_RTX($hexdata,"rly4",$verc),
                    prt_LC_RTX($hexdata,"rly5",$verc),prt_LC_RTX($hexdata,"rly6",$verc),
                    prt_LC_RTX($hexdata,"rly7",$verc),prt_LC_RTX($hexdata,"rly8",$verc),
                    prt_LC_RTX($hexdata,"cmpccmid0",$verc),
                    prt_LC_RTX($hexdata,"cmpope0",$verc),prt_LC_RTX($hexdata,"cmpval0",$verc),
                    prt_LC_RTX($hexdata,"cmbcmp1",$verc),prt_LC_RTX($hexdata,"cmpccmid1",$verc),
                    prt_LC_RTX($hexdata,"cmpope1",$verc),prt_LC_RTX($hexdata,"cmpval1",$verc),
                    prt_LC_RTX($hexdata,"cmbcmp2",$verc),prt_LC_RTX($hexdata,"cmpccmid2",$verc),
                    prt_LC_RTX($hexdata,"cmpope2",$verc),prt_LC_RTX($hexdata,"cmpval2",$verc),
                    prt_LC_RTX($hexdata,"cmbcmp3",$verc),prt_LC_RTX($hexdata,"cmpccmid3",$verc),
                    prt_LC_RTX($hexdata,"cmpope3",$verc),prt_LC_RTX($hexdata,"cmpval3",$verc),
                    prt_LC_RTX($hexdata,"cmbcmp4",$verc),prt_LC_RTX($hexdata,"cmpccmid4",$verc),
                    prt_LC_RTX($hexdata,"cmpope4",$verc),prt_LC_RTX($hexdata,"cmpval4",$verc),
                );
                break;
            }
        $n++;
        if ($n>29) return;
    }
}


function display_tx($fp,$ver) {
    global $n;
    for($y=0;$y<4;$y++) {
        for($w=0;$w<4;$w++) {  // 4records per an entry
            $buffer = fgets($fp,80);
            for($x=0;$x<16;$x++) {
                $z = 0xff & hexdec(substr($buffer,(3*$x+8),3));
                $hexdata[$w*0x10+$x] = $z;
                //                printf("%02X ",$z);
            }
            //            printf("\n");
        }
        printf("%02d:%s,%3d,%3d,%3d,%2d,%s,%d,%c,%s,%s,%d,%d,%d,%d,%d,%d,%s,%s,%s,%s,%s,%s,%s,%s%s\n",
               $n,prt_LC_RTX($hexdata,"valid"),prt_LC_RTX($hexdata,"room"),
               prt_LC_RTX($hexdata,"region"),prt_LC_RTX($hexdata,"order"),prt_LC_RTX($hexdata,"priority"),
               prt_LC_RTX($hexdata,"lv"),prt_LC_RTX($hexdata,"cast"),prt_LC_RTX($hexdata,"sr"),
               prt_LC_RTX($hexdata,"ccmtype"),prt_LC_RTX($hexdata,"unit"),
               prt_LC_RTX($hexdata,"sthr"),prt_LC_RTX($hexdata,"stmn"),
               prt_LC_RTX($hexdata,"edhr"),prt_LC_RTX($hexdata,"edmn"),
               prt_LC_RTX($hexdata,"inmn"),prt_LC_RTX($hexdata,"dumn"),
               prt_LC_RTX($hexdata,"rly1"),prt_LC_RTX($hexdata,"rly2"),
               prt_LC_RTX($hexdata,"rly3"),prt_LC_RTX($hexdata,"rly4"),
               prt_LC_RTX($hexdata,"rly5"),prt_LC_RTX($hexdata,"rly6"),
               prt_LC_RTX($hexdata,"rly7"),prt_LC_RTX($hexdata,"rly8"),
               prt_LC_RTX($hexdata,"cond"));
        $n++;
        if ($n>9) return;
    }
}

function display_ope($fp,$ver) {
    global $n;
    for($y=0;$y<8;$y++) {
        for($w=0;$w<2;$w++) {
            $buffer = fgets($fp,80);
            for($x=0;$x<16;$x++) {
                $z = 0xff & hexdec(substr($buffer,(3*$x+8),3));
                $hexdata[$w*0x10+$x] = $z;
            }
        }
        printf("%02d:%s,%3d,%3d,%3d,%2d,%s%s%s\n",$n,prt_LC_RTX($hexdata,"valid"),prt_LC_RTX($hexdata,"room"),
               prt_LC_RTX($hexdata,"region"),prt_LC_RTX($hexdata,"order"),prt_LC_RTX($hexdata,"lifecnt"),
               prt_LC_RTX($hexdata,"opeccmtype"),prt_LC_RTX($hexdata,"ope"),prt_LC_RTX($hexdata,"fval"));
        $n++;
        if ($n>9) return;
    }
}

//
// Subroutines
//

function getVersion($url) {
    $vul = sprintf("http://%s/L007F0000",$url);
    $f = fopen($vul,"r");
    if ($f) {
        for ($y=0;$y<15;$y++) {
            $buffer = fgets($f,80);
        }
        $buffer = fgets($f,80);
        $ver = "";
        for($x=0;$x<16;$x++) {
            $z = chr(0xff & hexdec(substr($buffer,(3*$x+8),3)));
            $ver .= $z;
        }
    }
    return($ver);
}

function normal_dump($fp) {
    while (($buffer = fgets($fp, 4096)) !== false) {
        if (substr($buffer,6,1)==':') {
            echo rtrim($buffer);
            echo "  ";
            for ($x=8;$x<54;$x+=3) {
                $y = hexdec(substr($buffer,$x,3));
                if (($y<0x20)||($y>0x7f)) {
                    echo ".";
                } else {
                    echo chr($y);
                }
            }                    
            echo "\n";
        } else {
            echo $buffer;
        }
    }
    if (!feof($fp)) {
        echo "Error: unexpected fgets() fail\n";
    }
}

function prt_LC_INFO($dt,$k) {
    switch($k) {
    case "uecsid":
        $odt = sprintf("%02X%02X%02X%02X%02X%02X",
                       $dt[0],$dt[1],$dt[2],$dt[3],$dt[4],$dt[5]);
        break;
    case "mac":
        $odt = sprintf("%02X:%02X:%02X:%02X:%02X:%02X",
                       $dt[6],$dt[7],$dt[8],$dt[9],$dt[10],$dt[11]);
        break;
    case "dhcpf":
        if ($dt[0x0c]==00) {
            $odt = "STATIC";
        } else {
            $odt = "DHCP";
        }
        break;
    case "ipaddress":
        $odt = _IPaddress($dt,0x10);
        break;
    case "netmask":
        $odt = _IPaddress($dt,0x14);
        break;
    case "defgw":
        $odt = _IPaddress($dt,0x18);
        break;
    case "dns":
        $odt = _IPaddress($dt,0x1c);
        break;
    case "vender":
        $odt = _LCText($dt,0x40,16);
        break;
    case "nodename":
        $odt = _LCText($dt,0x50,16);
        break;
    case "dbgmsg":
        $odt = _LCBitSW($dt,0x60);
        break;
    }
    return $odt;
}

function prt_LC_RTX($dt,$k,$verc) {
    switch($verc) {
    case 2:
        switch($k) {
        case "valid":
            if (($dt[0]&0xff)==1) {
                return("E");
            } else {
                return("N");
            }
            break;
        case "room":
            return($dt[1]&0xff);
            break;
        case "region":
            return($dt[2]&0xff);
            break;
        case "order":
            $z = ($dt[4]&0xff)*0x100+($dt[3]&0xff);
            return($z);
        case "lifecnt":
        case "priority":
            return($dt[5]&0xff);
        case "lv":
            return(_LCLv($dt,6));
        case "cast":
            return($dt[7]&0xff);
        case "sr":
            return($dt[8]&0xff);
        case "ccmtype":
            return(_LCText($dt,9,20));
        case "unit":
            return(_LCText($dt,0x1d,10));
        case "opeccmtype":
            return(_LCText($dt,6,20));
        case "ope":
            return(responseOPE($dt[0x1a]));
//           switch($dt[0x1a]&0x7f) {
//            case 0x00:
//            case 0x7f:
//                return(" ");
//           case 0x01:
//                return("==");
//            case 0x02:
//                return(">");
//            case 0x03:
//                return("<");
//            case 0x04:
//                return(">=");
//            case 0x05:
//                return("<=");
//            case 0x06:
//                return("&&");
//            case 0x07:
//                return("||");
//            case 0x08:
//                return("!=");
//            default:
//                return("??");
//            }
            break;
        case "sthr":
            return($dt[0x27]&0xff);
        case "stmn":
            return($dt[0x28]&0xff);
        case "edhr":
            return($dt[0x29]&0xff);
        case "edmn":
            return($dt[0x2a]&0xff);
        case "inmn":
            return($dt[0x2b]&0xff);
        case "dumn":
            return($dt[0x2c]&0xff);
        case "rly1":
            return(_LCRly($dt,1));
        case "rly2":
            return(_LCRly($dt,2));
        case "rly3":
            return(_LCRly($dt,3));
        case "rly4":
            return(_LCRly($dt,4));
        case "rly5":
            return(_LCRly($dt,5));
        case "rly6":
            return(_LCRly($dt,6));
        case "rly7":
            return(_LCRly($dt,7));
        case "rly8":
            return(_LCRly($dt,8));
        case "fval":
            return(_LCFloat($dt,0x1b));
            break;
        case "cond":
            if (($dt[0x30]==0xff)||($dt[0x00]!=1)) return("");
            $z = ",";
            $z .= sprintf("ope%02d",$dt[0x30]&0xff);
            for($i=0;$i<4;$i++) {
                switch($dt[0x31+$i]&0xff) {
                case 6: // R_AND
                    $z .= "&&";
                    break;
                case 7: // R_OR
                    $z .= "||";
                    break;
                default:
                    return($z);
                }
                $y = $dt[0x32+$i]&0xff;
                if ($y==0xff) return($z);
                $z .= sprintf("ope%02d",$y);
            }
            return($z);
        }
        break;
    case 3:
        switch($k) {
        case "valid":
            if (($dt[0]&0xff)==1) {
                return("E");
            } else {
                return("N");
            }
            break;
        case "sthr":
            return($dt[0x01]&0xff);
        case "stmn":
            return($dt[0x02]&0xff);
        case "edhr":
            return($dt[0x03]&0xff);
        case "edmn":
            return($dt[0x04]&0xff);
        case "mnflag":
            switch($dt[0x05]&0xff) {
                case 0:
                    return("SEC");
                case 0xff:
                    return("MIN");
                default:
                    return("???");
            }
            break;
        case "inmn":
            return($dt[0x06]&0xff);
        case "dumn":
            return($dt[0x07]&0xff);
        case "rly1":
            return(_LCRly($dt,1));
        case "rly2":
            return(_LCRly($dt,2));
        case "rly3":
            return(_LCRly($dt,3));
        case "rly4":
            return(_LCRly($dt,4));
        case "rly5":
            return(_LCRly($dt,5));
        case "rly6":
            return(_LCRly($dt,6));
        case "rly7":
            return(_LCRly($dt,7));
        case "rly8":
            return(_LCRly($dt,8));
        case "cmpccmid0":
            return($dt[0x10]&0xff);
        case "cmpope0":
            return(responseOPE($dt[0x11]));
        case "cmpval0":
            return(_LCFloat($dt,0x12));
        case "cmbcmp1":
            return(responseOPE($dt[0x16]));
        case "cmpccmid1":
            return($dt[0x17]&0xff);
        case "cmpope1":
            return(responseOPE($dt[0x18]));
        case "cmpval1":
            return(_LCFloat($dt,0x19));
        case "cmbcmp2":
            return(responseOPE($dt[0x1d]));
        case "cmpccmid2":
            return($dt[0x1e]&0xff);
        case "cmpope2":
            return(responseOPE($dt[0x1f]));
        case "cmpval2":
            return(_LCFloat($dt,0x20));
        case "cmbcmp3":
            return(responseOPE($dt[0x24]));
        case "cmpccmid3":
            return($dt[0x25]&0xff);
        case "cmpope3":
            return(responseOPE($dt[0x26]));
        case "cmpval3":
            return(_LCFloat($dt,0x27));
        case "cmbcmp4":
            return(responseOPE($dt[0x2b]));
        case "cmpccmid4":
            return($dt[0x2c]&0xff);
        case "cmpope4":
            return(responseOPE($dt[0x2d]));
        case "cmpval4":
            return(_LCFloat($dt,0x2e));
        }
        break;
    }
}

/*  Relay operation          */
/*  Group semi 20230615 p.9  */
function _LCRly($dt,$rnum) {
    switch($rnum) {
    case 1:
    case 2:
    case 3:
    case 4:
        $x = $dt[0x2d];
        $s = (4-$rnum)*2;
        break;
    case 5:
    case 6:
    case 7:
    case 8:
        $x = $dt[0x2e];
        $s = (8-$rnum)*2;
        break;
    }
    $y = ($x>>$s)&0x03;

    switch($y) {
    case 0:
        $z = "CONT";
        break;
    case 1:
        $z = "BOTH";
        break;
    case 2:
        $z = "BREAK";
        break;
    case 3:
        $z = "MAKE";
        break;
    }
    return($z);
}

function responseOPE($ope) {
    switch($ope&0x7f) {
        case 0x00:
        case 0x7f:
            return(" ");
        case 0x01:
            return("==");
        case 0x02:
            return(">");
        case 0x03:
            return("<");
        case 0x04:
            return(">=");
        case 0x05:
            return("<=");
        case 0x06:
            return("&&");
        case 0x07:
            return("||");
        case 0x08:
            return("!=");
        default:
            return("??");
    }
}
function _LCFloat($dt,$ofs) {
    $d  = ($dt[$ofs+3]&0xff)*0x1000000;
    $d += ($dt[$ofs+2]&0xff)*0x10000;
    $d += ($dt[$ofs+1]&0xff)*0x100;
    $d += ($dt[$ofs+0]&0xff);
    if ($d==0xffffffff) return("NaN");
    $f = ieee754_32($d);
    $r = sprintf("%f",$f);
    return($r);
}

function _LCBitSW($dt,$ofs) {
    $d = $dt[$ofs];
    $odt = substr("00000000".decbin($d),-0,8);
    return($odt);
}

function _LCText($dt,$ofs,$len) {
    $rt = "";
    for($x=0;$x<$len;$x++) {
        if (($dt[$ofs+$x]<0x20)||($dt[$ofs+$x]>0x7f)) {
            $rt .= NULL;
            break;
        } else {
            $rt .= chr($dt[$ofs+$x]);
        }
    }
    return($rt);
}

function _LCLv($dt,$ofs) {
    switch($dt[$ofs]) {
    case 1:
        return("A-1S-0");
    case 2:
        return("A-1S-1");
    case 3:
        return("A-10S-0");
    case 4:
        return("A-10S-1");
    case 5:
        return("A-1M-0");
    case 6:
        return("A-1M-1");
    case 7:
        return("B0");
    case 8:
        return("B1");
    case 9:
        return("S-1S-0");
    case 10:
        return("S-1M-0");
    default:
        return("??");
    }
}

function _IPaddress($dt,$ofs) {
    if ($dt[0x0c]!=00) {
        $ign = "(ignore)";
    } else {
        $ign = "";
    }
    $odt = sprintf("%d.%d.%d.%d %s",$dt[$ofs],$dt[$ofs+1],$dt[$ofs+2],$dt[$ofs+3],$ign);
    return($odt);
}

function ieee754_32($v) {
    $si = ($v & 0x80000000) >> 31;
    $ex = ($v & 0x7F800000) >> 23;
    $fr = ($v & 0x007fffff);
    $fv = (-1)**$si*(2**($ex-127))*(1+($fr*2**(-23)));
    return($fv);
}

# -*- mode: php-mode; -*-
?>

